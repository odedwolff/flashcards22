extends slvk_stat_layout

block sl_stt_layout-content
    div(id="loadDiv") LOADING
    h1 stats text input  
    textarea(id='textBox1' name="Text1" cols="40" rows="5")
    button(id='buttonSpeak' onclick="speak()") speak
    div
        label auto speak 
        input(type="checkbox" id="chekboxAutoSpeck" name="autoSpeak" onclick = "updateAutoSpeck()") 
    h1 next word 
    div 
        label(id="lblEngIt") English -> Italian 
        button(onclick = "changeTrxDir()") switch direction
        label(id="lblItEng" class="clsOptionEnabled") Italian -> English  

    div
        label do you know the meaning of 
        label(id="labelQ") "question here..."
    div
        label(id="labelA") "answer here..."
    button(onclick="handleShowTrx()" id="buttonShowTrx") show translation key [key 3]
    button(onclick="updateCorrect(true)" id="buttonYes") yes  [key 1] 
    button(onclick="updateCorrect(false)" id="buttonNo") no [key 2]
    button(id='buttonSelNext' onclick="loadNextWord()" disabled) next word key [4]


    script(type="text/javascript").
       
        const DIR_ENG_IT = 1;
        const DIR_IT_ENG = 2;
        var currentTrxDir = DIR_IT_ENG;
       
        function changeTrxDir(){
             document.getElementById("lblEngIt").classList.toggle("clsOptionEnabled");
             document.getElementById("lblEngIt").classList.toggle("clsOptionDisabled");
             document.getElementById("lblItEng").classList.toggle("clsOptionEnabled");
             document.getElementById("lblItEng").classList.toggle("clsOptionDisabled");

            currentTrxDir = currentTrxDir == DIR_ENG_IT?DIR_IT_ENG : DIR_ENG_IT;
        }


        var curWrod = {
            word:'...', 
            id:null, 
        }

        var autoSpeak = false;


        function updateAutoSpeck(){
            var checked = document.getElementById('chekboxAutoSpeck').checked;
            autoSpeak = checked;
            console.log(`set auto speak = ${autoSpeak}`);
        }

        function handler1(){
            console.log("handler");
        }
        function sendAjaxTest(){
            const URL_ORG = 'http://example.com/movies.json';
            const URL = '/testAjax';
            text = document.getElementById("textBox1").value;
            fetch(URL, 
                { method: 'POST',
                  data:{
                      key1:'val1',
                      key2:5053,
                      text:text
                  }
                })
                .then(function(response) {
                    return response.json();
            });
        }

        

        function sendAjaxTest2(){
            rawText = document.getElementById("textBox1").value;
            
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/testAjax");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            var counter = count(rawText);
            xmlhttp.send(JSON.stringify({name:"John Rambo", time:"2pm", text:rawText, counter: counter}));
        }


        function loadInit(){
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/loadScoreToServer");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            xmlhttp.onreadystatechange = function() { // Call a function when the state changes.
             if (this.readyState === XMLHttpRequest.DONE && this.status === 200)
                 {
                    enableButSelNext(true);
                    console.log('init info loaded');
                    document.getElementById("loadDiv").hidden = true;
                 }
                else    
                    {
                         if(this.status != 200)
                         console.log(`problem in update status= ${this.status}`);
                    }
            }
            xmlhttp.send();
        }

        function jumpKey(elmId){
            const elm = document.getElementById(elmId);
            elm.classList.add("buttonHit");
            setTimeout(()=>{elm.classList.remove("buttonHit");}, 150);

        }
                 
        function loadNextWord(){
            hideAnswer();
            clearQ();
            clearA();
            enableShowTrx(false);
            enableNextButton(false);

           
            
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/selectNextWord");
            xmlhttp.setRequestHeader("Content-Type", "application/json");


            xmlhttp.onreadystatechange = function() { // Call a function when the state changes.
                    if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                       // console.log(`response ready state= ${JSON.stringify(this.readyState)}`);
                        console.log(`response ready state= ${this.response}`);
                        var parsed = JSON.parse(this.response);
                        
                        //pick weather to set Source->Target or vice versa 
                        if(currentTrxDir == DIR_IT_ENG){
                            curWrod.word = parsed.selectedWordInfo.word;
                            curWrod.translation= parsed.selectedWordInfo.translation;
                        }else{
                            curWrod.word = parsed.selectedWordInfo.translation;
                            curWrod.translation = parsed.selectedWordInfo.word;
                        }
                        
                        curWrod.id = parsed.selectedWordInfo.id;
                        console.log(`retreived word =${curWrod.word}`);
                        document.getElementById('labelQ').innerHTML = curWrod.word;
                        document.getElementById('labelA').innerHTML = curWrod.translation;
                         // Request finished. Do processing here.
                        enableShowTrx(true);
                        if(autoSpeak && currentTrxDir == DIR_IT_ENG)
                            speak();
                    }
            }


            xmlhttp.send();
        }

        function enableNextButton(flag){
            document.getElementById("buttonSelNext").disabled = !flag;
        }


        function count(rawText){
            const words = rawText.split(" ");
            var counter ={};
            for (var i = 0 ; i < words.length;i++){
                key = words[i];
                if(key in counter){
                    counter[key]++
                }else{
                     counter[key] = 1;
                }

                //console.log(wrods[i] + "\n" + i);
            }
            console.log(`wrods count: ${counter}`);
            return counter; 
        }   

        function enableCorrectButtons(flag){
            const buttonYes =  document.getElementById('buttonYes');
            const buttonNo =  document.getElementById('buttonNo');
            buttonYes.disabled = !flag;
            buttonNo.disabled = !flag;
        }

        function showAnswer(){
             setAnswerVisible(true);
             if(autoSpeak && currentTrxDir == DIR_ENG_IT){
                 speak();
             }
        };
        function hideAnswer(){
             setAnswerVisible(false);
        };

        function setAnswerVisible(flag){
            document.getElementById('labelA').hidden = !flag;
        }  

        function clearQ(){
            document.getElementById('labelQ').innerHTML = "";
        }  

        function clearA(){
            document.getElementById('labelA').innerHTML = ""; 
        }

        function enableShowTrx(flag){
            document.getElementById('buttonShowTrx').disabled = !flag; 
        }

        function enableButSelNext(flag){
            document.getElementById('buttonSelNext').disabled = !flag; 
            
        }

       

        


        function handleShowTrx(){
            enableShowTrx(false);
            enableCorrectButtons(true);
            showAnswer();
        }

        function initUI(){
            enableCorrectButtons(false);
            enableShowTrx(false);
            enableButSelNext(false);
            setKeyEvents();
        }

        function setKeyEvents(){
            document.addEventListener('keydown', (event) => {
                var name = event.key;
                var code = event.code;
               hanleKeyEvent(name);
            }, false);
        }


        

        function hanleKeyEvent(keyName){
            switch(keyName){
                case '1':
                    if(!document.getElementById("buttonYes").disabled){
                        updateCorrect(true);
                        jumpKey("buttonYes");
                    }
                    break;
                case '2':
                    if(!document.getElementById("buttonNo").disabled){
                         updateCorrect(false);
                         jumpKey("buttonNo");
                    }
                    break;
                case '3':
                   if(!document.getElementById("buttonShowTrx").disabled){
                         handleShowTrx();
                         jumpKey("buttonShowTrx");
                   }
                   break;
                case '4':
                    if(!document.getElementById("buttonSelNext").disabled){
                         loadNextWord();
                         jumpKey("buttonSelNext");
                    }
                    break;
                default: 
                    //console.log(`kb event default, key name=${keyName}`)
            }
        }



        function updateCorrect(flag){
            enableCorrectButtons(false);
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/updateCorrect");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            xmlhttp.onreadystatechange = function() { // Call a function when the state changes.
             if (this.readyState === XMLHttpRequest.DONE && this.status === 200)
                 {
                    console.log('update complete')
                    enableNextButton(true);
                 }
                else    
                    {
                        if(this.status != 200)
                             console.log(`problem in update status= ${this.status}`);
                    }
            }
            xmlhttp.send(JSON.stringify({wordId:curWrod.id , correct:flag}));
        }

        function test1(){
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/test1");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            xmlhttp.onreadystatechange = function() { // Call a function when the state changes.
             if (this.readyState === XMLHttpRequest.DONE && this.status === 200)
                 {
                    console.log('test request received')
                 }
                else    
                 {
                    if(this.status != 200)
                          console.log(`problem in update status= ${this.status}`);
                 }
            }
            xmlhttp.send();
        }

     

        window.onload = function(){
            console.log("doc.ready()");
            initUI();
            loadInit();
        }

        function speak(){
            if(!curWrod.id){
                console.log("WARNNING-no current word, can't speak");
                return;
            }
            let u = new SpeechSynthesisUtterance();
            if(currentTrxDir == DIR_IT_ENG){
                u.text = curWrod.word;
            }else{
                u.text = curWrod.translation;
            }
            u.lang = 'it';
            u.rate = 1.0;
            speechSynthesis.speak(u);
        }

        





    