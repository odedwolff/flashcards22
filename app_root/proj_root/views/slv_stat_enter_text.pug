extends slvk_stat_layout

block sl_stt_layout-content
    div(id="loadDiv") LOADING
    div(id="divSession")
        div(id="divRegister")
        div(id='register form' class='session form')
            label userName  
            input(type="text" id="inUserName" name="userName" ) 
            label password  
            input(type="text" id="inPassword" name="passWord" ) 
            label confirm password  
            input(type="text" id="inConfirmPassword" name="confirmPassWord" ) 
            button(id='btSendRegister' onclick = 'sendRegister()') submit

   
    textarea(id='textBox1' name="Text1" cols="40" rows="5")
    button(id='buttonSpeak' onclick="speak()") speak
    div(id='divAutoSpeak')
        label auto speak 
        input(type="checkbox" id="chekboxAutoSpeck" name="autoSpeak" onclick = "updateAutoSpeck()") 

    div 
        label(id="lblEngIt") English -> Italian 
        button(onclick = "changeTrxDir()") switch direction
        label(id="lblItEng" class="clsOptionEnabled") Italian -> English  

    div
        label do you know the meaning of 
        label(id="labelQ") "question here..."
    

    button( onclick="updateCorrect(null, true)" id='buttonSuspend') suspend [0]

    div(id='divAnswerTextIn')
        div(id= 'textInput')
            label answer  
            input(type="text" id="inAsnwer" name="inAsnwer" ) 

    div(id='divCorrectFeedback')
        div(id='divAnsCorrect')
            label RIGHT
        div(id='divAnsCloseEnough')
            label CLOSE ENOUGH 
        div(id='divAnsIncorrect')
            label NOT QUITE
        div(id='divCorrectAnswer')
            label Correct Answer: 
            label(id="labelA") "answer here..."
        button(id='buttonSelNext' onclick="selNextWordLocal()" disabled) next word

        
    div(id='testPanel')
        button(onclick = "test1()") test1

     

    script(type="text/javascript").
       
        const DIR_ENG_IT = 1;
        const DIR_IT_ENG = 2;
        var currentTrxDir = DIR_IT_ENG;

        const MAX_STR_DISTANCE = 2;

        //the max string distance to render an answer 'close enough'
        const CORRECT_THRESH = 2;

       


        const stats = {
            wordInfoDict:null
        }


        function selNextWordLocal(){
            hideCorrectSectionElms();
            //hideAnswer();
            clearQ();
            clearA();
            clearTextInAnswer();
            enableNextButton(false);
            var selWord = selectNextWord11(stats, true);
            console.log(`slected word sturct= {$selWord}`);
                        
            //pick weather to set Source->Target or vice versa 
            if(currentTrxDir == DIR_IT_ENG){
                curWrod.word = selWord.word;
                 curWrod.translation= selWord.translation;
            }else{
                if(selWord.mainTrx){
                    curWrod.word = selWord.mainTrx;
                 }else{
                    curWrod.word = selWord.translation
                }
                curWrod.translation = selWord.similars;

             }
                        
            curWrod.id = selWord.id;
            console.log(`retreived word =${curWrod.word}`);
            document.getElementById('labelQ').innerHTML = curWrod.word;
            document.getElementById('labelA').innerHTML = curWrod.translation;
            if(autoSpeak && currentTrxDir == DIR_IT_ENG)
                    speak();
        }

        

        function flashCorrectOld(flag){
            const elm = document.getElementById(flag? 'divCorrect': 'divIncorrect' );
            elm.style.visibility = "visible";
            setTimeout(((elm)=>{
                elm.style.visibility = "hidden";
                }).bind(null, elm),
                 1000);
        }

        function flashCorrect(distance){
            
            document.getElementById("buttonSelNext").style.display = "block"
            if(distance < 0){
                throw "ERROR - NEGATIVE VALUE DISTANCE"
            }
            if(distance == 0 ){
                document.getElementById("divAnsCorrect").style.display = "block";
            }else{
                if(distance > 0 && distance < CORRECT_THRESH){
                    document.getElementById("divAnsCloseEnough").style.display = "block";
                    document.getElementById("divCorrectAnswer").style.display = "block";
                //distance more than 2 
                }else{
                    document.getElementById("divAnsIncorrect").style.display = "block";
                    document.getElementById("divCorrectAnswer").style.display = "block";
                }
            }
        }


        function hideCorrectSectionElms(){
            
            document.getElementById("divAnsCorrect").style.display = "none";
            document.getElementById("divAnsCloseEnough").style.display = "none";
            document.getElementById("divAnsIncorrect").style.display = "none";
            document.getElementById("divCorrectAnswer").style.display = "none";
            document.getElementById("buttonSelNext").style.display = "none";
        }


        function handleTextSubmit(){
            const userAnswer = document.getElementById('inAsnwer').value;
            const translations = curWrod.translation.split(',');
            const minDist = minDistance(translations, userAnswer);
            console.log(`min distance = ${minDist}`);
            //flashCorrect(minDist < 2);
            flashCorrect(minDist);
            //TODO - update correct on database 
            enableNextButton(true);

            if(minDist < CORRECT_THRESH){
                updateScore(curWrod.id, true);
            }else{
                updateScore(curWrod.id, false);
            }
        }

        

        function updateScore(wordId, isCorrect){
            const inc = isCorrect ? 1 : 0;
            const wordEntry = stats.wordInfoDict[wordId];
            if (!wordEntry) {
                throw 'no entry for word ${wordId}';
            }
            wordEntry['attempts']++;
            wordEntry['correct'] += inc;
            //updateScoreRemote(wordId, wordEntry['attempts'], wordEntry['correct']);
        }       

        

        //end request to server to update db 
        function updateScoreDb(wordId, isCorrect){

        }
       
        function changeTrxDir(){
             document.getElementById("lblEngIt").classList.toggle("clsOptionEnabled");
             document.getElementById("lblEngIt").classList.toggle("clsOptionDisabled");
             document.getElementById("lblItEng").classList.toggle("clsOptionEnabled");
             document.getElementById("lblItEng").classList.toggle("clsOptionDisabled");

            document.getElementById('chekboxAutoSpeck').checked = false;
            updateAutoSpeck();
            document.getElementById("divAutoSpeak").classList.toggle("clsDivDis");

            currentTrxDir = currentTrxDir == DIR_ENG_IT?DIR_IT_ENG : DIR_ENG_IT;
        }


        var curWrod = {
            word:'...', 
            id:null, 
        }

        var autoSpeak = false;


        function updateAutoSpeck(){
            var checked = document.getElementById('chekboxAutoSpeck').checked;
            autoSpeak = checked;
            console.log(`set auto speak = ${autoSpeak}`);
        }

        function handler1(){
            console.log("handler");
        }
        function sendAjaxTest(){
            const URL_ORG = 'http://example.com/movies.json';
            const URL = '/testAjax';
            text = document.getElementById("textBox1").value;
            fetch(URL, 
                { method: 'POST',
                  data:{
                      key1:'val1',
                      key2:5053,
                      text:text
                  }
                })
                .then(function(response) {
                    return response.json();
            });
        }

        

        function sendAjaxTest2(){
            rawText = document.getElementById("textBox1").value;
            
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/testAjax");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            var counter = count(rawText);
            xmlhttp.send(JSON.stringify({name:"John Rambo", time:"2pm", text:rawText, counter: counter}));
        }


        function loadInit(){
            var req = new XMLHttpRequest(); 
            req.open("POST", "/loadScoreToServer");
            req.setRequestHeader("Content-Type", "application/json");
            req.onload  = function() {
                stats.wordInfoDict = (JSON.parse(req.responseText))["dictionary"];
                  //exmple how to approach word 6002:
                  // model.wordsInfo['dictionary'][6002] 
                UILoadComplete(); 
                console.log("loaded dictionary, now selecting first word");
                //select first word
                selNextWordLocal();                 
                };
            req.send(JSON.stringify({fwdToClient:true}));

        }


        function jumpKey(elmId){
            const elm = document.getElementById(elmId);
            elm.classList.add("buttonHit");
            setTimeout(()=>{elm.classList.remove("buttonHit");}, 150);

        }

        function clearTextInAnswer(){
            document.getElementById('inAsnwer').value = '';
        }
                 
        function loadNextWordDepracted(){
            clearCorrectSection();
           // hideAnswer();
            //clearQ();
           // clearA();
           // clearTextInAnswer();
            //enableNextButton(false);

            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/selectNextWord");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            

            xmlhttp.onreadystatechange = function() { // Call a function when the state changes.
                    if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                       // console.log(`response ready state= ${JSON.stringify(this.readyState)}`);
                        console.log(`response ready state= ${this.response}`);
                        var parsed = JSON.parse(this.response);
                        
                        //pick weather to set Source->Target or vice versa 
                        if(currentTrxDir == DIR_IT_ENG){
                            curWrod.word = parsed.selectedWordInfo.word;
                            curWrod.translation= parsed.selectedWordInfo.translation;
                        }else{
                            //curWrod.word = parsed.selectedWordInfo.translation;
                            //curWrod.translation = parsed.selectedWordInfo.word;
                            if(parsed.selectedWordInfo.mainTrx){
                                 curWrod.word = parsed.selectedWordInfo.mainTrx;
                            }else{
                                 curWrod.word = parsed.selectedWordInfo.translation
                            }
                            curWrod.translation = parsed.selectedWordInfo.similars;

                        }
                        
                        curWrod.id = parsed.selectedWordInfo.id;
                        console.log(`retreived word =${curWrod.word}`);
                        document.getElementById('labelQ').innerHTML = curWrod.word;
                        document.getElementById('labelA').innerHTML = curWrod.translation;
                         // Request finished. Do processing here.
                        //enableShowTrx(true);
                        if(autoSpeak && currentTrxDir == DIR_IT_ENG)
                            speak();
                    }
            }


            xmlhttp.send( JSON.stringify({"includeReverseSearch":currentTrxDir==DIR_ENG_IT}));
            //xmlhttp.send();
            
        }

        function enableNextButton(flag){
            document.getElementById("buttonSelNext").disabled = !flag;
        }


        function count(rawText){
            const words = rawText.split(" ");
            var counter ={};
            for (var i = 0 ; i < words.length;i++){
                key = words[i];
                if(key in counter){
                    counter[key]++
                }else{
                     counter[key] = 1;
                }

                //console.log(wrods[i] + "\n" + i);
            }
            console.log(`wrods count: ${counter}`);
            return counter; 
        }   

        function enableCorrectButtons(flag){
            //const buttonYes =  document.getElementById('buttonYes');
            //const buttonNo =  document.getElementById('buttonNo');
            const buttonSus =  document.getElementById('buttonSuspend');

            //buttonYes.disabled = !flag;
           // buttonNo.disabled = !flag;
            buttonSus.disabled = !flag; 
        }

        function showAnswer(){
             setAnswerVisible(true);
             if(autoSpeak && currentTrxDir == DIR_ENG_IT){
                 speak();
             }
        };
        function hideAnswer(){
             setAnswerVisible(false);
        };

        function setAnswerVisible(flag){
            document.getElementById('labelA').hidden = !flag;
        }  

        function clearQ(){
            document.getElementById('labelQ').innerHTML = "";
        }  

        function clearA(){
            document.getElementById('labelA').innerHTML = ""; 
        }

        function enableShowTrx(flag){
            document.getElementById('buttonShowTrx').disabled = !flag; 
        }

        function enableButSelNext(flag){
            document.getElementById('buttonSelNext').disabled = !flag; 
            
        }

       

        


        function handleShowTrx(){
           // enableShowTrx(false);
            enableCorrectButtons(true);
            showAnswer();
        }

        function initUI(){
            enableCorrectButtons(false);
            enableButSelNext(false);
            setKeyEvents();
        }

        function UILoadComplete(){
            enableButSelNext(true);
            document.getElementById("loadDiv").hidden = true;
        }


        function setKeyEvents(){
            //set number shortcuts
            document.addEventListener('keydown', (event) => {
                var name = event.key;
                var code = event.code;
               //hanleKeyEvent(name);
            }, false);

            //set text input handler 
            document.getElementById("textInput").addEventListener("keypress", function(event) {
                if (event.key === "Enter") {
                    event.preventDefault();
                    handleTextSubmit();
                    }
            });
        }


        

        function hanleKeyEvent(keyName){
            switch(keyName){
                case '1':
                    if(!document.getElementById("buttonYes").disabled){
                        updateCorrect(true, false);
                        jumpKey("buttonYes");
                    }
                    break;
                case '2':
                    if(!document.getElementById("buttonNo").disabled){
                         updateCorrect(false, false);
                         jumpKey("buttonNo");
                    }
                    break;
                case '3':
                   if(!document.getElementById("buttonShowTrx").disabled){
                         handleShowTrx();
                         jumpKey("buttonShowTrx");
                   }
                   break;
                case '4':
                    if(!document.getElementById("buttonSelNext").disabled){
                         loadNextWord();
                         jumpKey("buttonSelNext");
                    }
                    break;
                case '0':
                    if(!document.getElementById("buttonSuspend").disabled){
                         updateCorrect(null, true);
                         jumpKey("buttonSuspend");
                    }
                    break;
                default: 
                    //console.log(`kb event default, key name=${keyName}`)
            }
        }


        function sendRegister(){
            enableCorrectButtons(false);
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/registerUser");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            xmlhttp.onreadystatechange = function() { // Call a function when the state changes.
             if (this.readyState === XMLHttpRequest.DONE && this.status === 200)
                 {
                    console.log('update complete')
                    enableNextButton(true);
                 }
                else    
                    {
                        if(this.status != 200)
                             console.log(`problem in update status= ${this.status}`);
                    }
            }
            xmlhttp.send(JSON.stringify({
                user:document.getElementById("inUserName").value
             , password:document.getElementById("inPassword").value
             }));
        }


        /*
        function updateCorrect(isCorrect, shouldSuspend){
            enableCorrectButtons(false);
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/updateCorrect");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            xmlhttp.onreadystatechange = function() { // Call a function when the state changes.
             if (this.readyState === XMLHttpRequest.DONE && this.status === 200)
                 {
                    console.log('update complete')
                    enableNextButton(true);
                 }
                else    
                    {
                        if(this.status != 200)
                             console.log(`problem in update status= ${this.status}`);
                    }
            }
            xmlhttp.send(JSON.stringify({wordId:curWrod.id , correct:isCorrect, suspend:shouldSuspend}));
        }
        */

        function updateScoreRemote(wordId, attempts, corrects){
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/updateCorrect2");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            xmlhttp.onreadystatechange = function(){ // Call a function when the state changes.
             if (this.readyState === XMLHttpRequest.DONE && this.status === 200)
                 {
                    console.log('update score remote complete')
                 }
                else    
                {
                    if(this.status != 200);
                    console.log(`problem in update status= ${this.status}`);
                }
            }
            xmlhttp.send(JSON.stringify({wordId:wordId , attempts:attempts, corrects:corrects}));
        }


        function test1(){
            var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance 
            xmlhttp.open("POST", "/test1");
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            xmlhttp.onreadystatechange = function() { // Call a function when the state changes.
             if (this.readyState === XMLHttpRequest.DONE && this.status === 200)
                 {
                    console.log('test request received')
                 }
                else    
                 {
                    if(this.status != 200)
                          console.log(`problem in update status= ${this.status}`);
                 }
            }
            xmlhttp.send();
        }

     

        window.onload = function(){
            console.log("doc.ready()");
            initUI();
            loadInit();
        }

        function speak(){
            if(!curWrod.id){
                console.log("WARNNING-no current word, can't speak");
                return;
            }
            let u = new SpeechSynthesisUtterance();
            if(currentTrxDir == DIR_IT_ENG){
                u.text = curWrod.word;
            }else{
                u.text = curWrod.translation;
            }
            u.lang = 'it';
            u.rate = 1.0;
            speechSynthesis.speak(u);
        }

        





    